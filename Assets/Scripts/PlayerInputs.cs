//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Kyota
{
    public partial class @PlayerInputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Land"",
            ""id"": ""4ff0e996-2b55-4ab4-b4e7-614f2959d6c3"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0158898b-7d35-43a9-87b6-66ddab0a74cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""6b4e7b6c-1826-4ba5-a91b-28945b1885dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""Button"",
                    ""id"": ""c0bd2c9c-1227-47a7-a1e8-8864e5f6c96f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gun Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ba9efe41-abbc-4f8f-aa33-5dc511f906b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a6544ecf-54b0-4e93-99a3-c1eee815b340"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a7de2d0-dd76-45ab-aaca-9f9cf291d18f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54229908-578b-4821-8b34-e36f1cca69a0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72d7e018-77ce-47a7-8119-ff0c86e29a87"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b31009a0-8c1f-4a76-aa01-1c73edd2a8a7"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8108dbd7-664f-4045-a0c0-af1305743cf3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13b5add9-ce86-44cc-a0b1-73e0f2d15d5f"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gun Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""480031d1-5e31-4625-8205-fbbd3ee10d7b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Land
            m_Land = asset.FindActionMap("Land", throwIfNotFound: true);
            m_Land_Jump = m_Land.FindAction("Jump", throwIfNotFound: true);
            m_Land_Shoot = m_Land.FindAction("Shoot", throwIfNotFound: true);
            m_Land_Slide = m_Land.FindAction("Slide", throwIfNotFound: true);
            m_Land_GunRotation = m_Land.FindAction("Gun Rotation", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Land
        private readonly InputActionMap m_Land;
        private ILandActions m_LandActionsCallbackInterface;
        private readonly InputAction m_Land_Jump;
        private readonly InputAction m_Land_Shoot;
        private readonly InputAction m_Land_Slide;
        private readonly InputAction m_Land_GunRotation;
        public struct LandActions
        {
            private @PlayerInputs m_Wrapper;
            public LandActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Jump => m_Wrapper.m_Land_Jump;
            public InputAction @Shoot => m_Wrapper.m_Land_Shoot;
            public InputAction @Slide => m_Wrapper.m_Land_Slide;
            public InputAction @GunRotation => m_Wrapper.m_Land_GunRotation;
            public InputActionMap Get() { return m_Wrapper.m_Land; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LandActions set) { return set.Get(); }
            public void SetCallbacks(ILandActions instance)
            {
                if (m_Wrapper.m_LandActionsCallbackInterface != null)
                {
                    @Jump.started -= m_Wrapper.m_LandActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnJump;
                    @Shoot.started -= m_Wrapper.m_LandActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnShoot;
                    @Slide.started -= m_Wrapper.m_LandActionsCallbackInterface.OnSlide;
                    @Slide.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnSlide;
                    @Slide.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnSlide;
                    @GunRotation.started -= m_Wrapper.m_LandActionsCallbackInterface.OnGunRotation;
                    @GunRotation.performed -= m_Wrapper.m_LandActionsCallbackInterface.OnGunRotation;
                    @GunRotation.canceled -= m_Wrapper.m_LandActionsCallbackInterface.OnGunRotation;
                }
                m_Wrapper.m_LandActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                    @Slide.started += instance.OnSlide;
                    @Slide.performed += instance.OnSlide;
                    @Slide.canceled += instance.OnSlide;
                    @GunRotation.started += instance.OnGunRotation;
                    @GunRotation.performed += instance.OnGunRotation;
                    @GunRotation.canceled += instance.OnGunRotation;
                }
            }
        }
        public LandActions @Land => new LandActions(this);
        public interface ILandActions
        {
            void OnJump(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnSlide(InputAction.CallbackContext context);
            void OnGunRotation(InputAction.CallbackContext context);
        }
    }
}
